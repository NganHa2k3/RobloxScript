-- Roblox LocalScript

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer
local currentTween = nil

-- Function to teleport to a specific player
local function teleportTo(targetPlayer)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        player.Character:MoveTo(targetPlayer.Character.HumanoidRootPart.Position)
        print("Teleporting to " .. targetPlayer.Name)
    else
        print("Target player is invalid or not found.")
    end
end

-- Function to find the nearest player
local function getNearestPlayer()
    local nearestPlayer = nil
    local shortestDistance = math.huge
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - p.Character.HumanoidRootPart.Position).magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = p
            end
        end
    end
    return nearestPlayer
end

-- Function to find the farthest player
local function getFarthestPlayer()
    local farthestPlayer = nil
    local longestDistance = 0
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - p.Character.HumanoidRootPart.Position).magnitude
            if distance > longestDistance then
                longestDistance = distance
                farthestPlayer = p
            end
        end
    end
    return farthestPlayer
end

-- Function to reset the player's character
local function resetCharacter()
    if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        player.Character:FindFirstChildOfClass("Humanoid").Health = 0
        player.Character:BreakJoints()
        print("Character has been reset.")
    else
        print("Humanoid not found in the character.")
    end
end

-- Function to tween to a specific player
local function tweenTo(targetPlayer, speed)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
        local startPosition = player.Character.HumanoidRootPart.Position
        local distance = (startPosition - targetPosition).magnitude
        local tweenSpeed = speed or 50
        local tweenTime = distance / tweenSpeed
        
        local tweenInfo = TweenInfo.new(tweenTime, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
        local tweenGoal = { CFrame = CFrame.new(targetPosition) }
        
        if currentTween then
            currentTween:Cancel()
        end
        
        currentTween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, tweenGoal)
        currentTween:Play()
        currentTween.Completed:Connect(function()
            print("Tweening to " .. targetPlayer.Name .. " completed at " .. tweenSpeed .. " studs per second.")
            currentTween = nil
        end)
    else
        print("Target player is invalid or not found.")
    end
end

-- Function to create a BillboardGui with player's name above their head
local function createNameTag(player)
    local character = player.Character
    if character then
        local head = character:FindFirstChild("Head")
        if head then
            local billboardGui = Instance.new("BillboardGui")
            billboardGui.Adornee = head
            billboardGui.Parent = head
            billboardGui.Size = UDim2.new(0, 200, 0, 50)
            billboardGui.StudsOffset = Vector3.new(0, 3, 0)
            billboardGui.AlwaysOnTop = true

            local textLabel = Instance.new("TextLabel")
            textLabel.Parent = billboardGui
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.TextColor3 = Color3.new(1, 1, 1)
            textLabel.TextStrokeTransparency = 0.5
            textLabel.Text = player.Name
            textLabel.TextScaled = true
        end
    end
end

-- Function to remove name tags from all players
local function removeNameTags()
    for _, player in ipairs(Players:GetPlayers()) do
        local character = player.Character
        if character then
            local head = character:FindFirstChild("Head")
            if head then
                local billboardGui = head:FindFirstChildOfClass("BillboardGui")
                if billboardGui then
                    billboardGui:Destroy()
                end
            end
        end
    end
end

-- Create name tags for all players currently in the game
for _, player in ipairs(Players:GetPlayers()) do
    createNameTag(player)
end

-- Create name tags for players who join the game
Players.PlayerAdded:Connect(createNameTag)

-- Function to handle chat messages
local function onPlayerChatted(message)
    local words = string.split(message:lower(), " ")
    
    if words[1] == "teleport" then
        if #words == 2 then
            if words[2] == "random" then
                local otherPlayers = {}
                for _, p in pairs(Players:GetPlayers()) do
                    if p ~= player then
                        table.insert(otherPlayers, p)
                    end
                end
                if #otherPlayers > 0 then
                    teleportTo(otherPlayers[math.random(#otherPlayers)])
                else
                    print("No other players to teleport to.")
                end
            elseif words[2] == "nearest" then
                local nearestPlayer = getNearestPlayer()
                if nearestPlayer then
                    teleportTo(nearestPlayer)
                else
                    print("No players found.")
                end
            elseif words[2] == "farthest" then
                local farthestPlayer = getFarthestPlayer()
                if farthestPlayer then
                    teleportTo(farthestPlayer)
                else
                    print("No players found.")
                end
            else
                local targetPlayer = Players:FindFirstChild(words[2])
                if targetPlayer then
                    teleportTo(targetPlayer)
                else
                    print("Player with username " .. words[2] .. " not found.")
                end
            end
        else
            print("Invalid teleport command.")
        end
    elseif words[1] == "reset" then
        resetCharacter()
    elseif words[1] == "tween" then
        local speed = tonumber(words[3]) or 50
        if #words == 2 then
            local targetPlayer = Players:FindFirstChild(words[2])
            if targetPlayer then
                tweenTo(targetPlayer, speed)
            else
                print("Player with username " .. words[2] .. " not found.")
            end
        elseif #words == 3 then
            if words[2] == "nearest" then
                local nearestPlayer = getNearestPlayer()
                if nearestPlayer then
                    tweenTo(nearestPlayer, speed)
                else
                    print("No players found.")
                end
            elseif words[2] == "farthest" then
                local farthestPlayer = getFarthestPlayer()
                if farthestPlayer then
                    tweenTo(farthestPlayer, speed)
                else
                    print("No players found.")
                end
            elseif words[2] == "random" then
                local otherPlayers = {}
                for _, p in pairs(Players:GetPlayers()) do
                    if p ~= player then
                        table.insert(otherPlayers, p)
                    end
                end
                if #otherPlayers > 0 then
                    tweenTo(otherPlayers[math.random(#otherPlayers)], speed)
                else
                    print("No other players to tween to.")
                end
            else
                print("Invalid tween command.")
            end
        else
            print("Invalid tween command.")
        end
    elseif words[1] == "untween" then
        if currentTween then
            currentTween:Cancel()
            currentTween = nil
            print("Ongoing tween has been cancelled.")
        else
            print("No tween to cancel.")
        end
    elseif words[1] == "showname" then
        for _, p in ipairs(Players:GetPlayers()) do
            createNameTag(p)
        end
        Players.PlayerAdded:Connect(createNameTag)
        print("Name tags are now visible.")
    elseif words[1] == "unshowname" then
        removeNameTags()
        print("Name tags have been removed.")
    else
        print("Unknown command.")
    end
end

-- Connect the chat message event to the handler function
player.Chatted:Connect(onPlayerChatted)
